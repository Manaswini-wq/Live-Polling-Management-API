# live_polling_api.py
# A simplified Python Flask implementation of all three milestones

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///polls.db'
db = SQLAlchemy(app)

# Database Models
class Poll(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    poll_str_id = db.Column(db.String(100), unique=True, nullable=False)
    question = db.Column(db.String(255), nullable=False)
    status = db.Column(db.String(10), default='active')

class Option(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    poll_id = db.Column(db.Integer, db.ForeignKey('poll.id'))
    text = db.Column(db.String(100))
    votes = db.Column(db.Integer, default=0)

class VoteLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    poll_id = db.Column(db.Integer, db.ForeignKey('poll.id'))
    user_identifier = db.Column(db.String(100))
    option_id = db.Column(db.Integer, db.ForeignKey('option.id'))
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

# Milestone 1: Prevent Multiple Votes
@app.route('/polls/<poll_str_id>/vote', methods=['POST'])
def vote(poll_str_id):
    data = request.get_json()
    user_id = data.get('user_identifier')
    option_id = data.get('option_id')

    poll = Poll.query.filter_by(poll_str_id=poll_str_id).first()
    if not poll:
        return jsonify({'error': 'Poll not found'}), 404

    if poll.status == 'closed':
        return jsonify({'error': 'Poll is closed'}), 403

    if user_id:
        existing_vote = VoteLog.query.filter_by(poll_id=poll.id, user_identifier=user_id).first()
        if existing_vote:
            return jsonify({'status': 'already_voted'})

    option = Option.query.filter_by(id=option_id, poll_id=poll.id).first()
    if not option:
        return jsonify({'error': 'Invalid option'}), 400

    option.votes += 1
    db.session.add(option)

    if user_id:
        vote_log = VoteLog(poll_id=poll.id, user_identifier=user_id, option_id=option.id)
        db.session.add(vote_log)

    db.session.commit()
    return jsonify({'status': 'vote_successful'})


# Milestone 2: List Active Polls
@app.route('/polls/active', methods=['GET'])
def get_active_polls():
    active_polls = Poll.query.filter_by(status='active').all()
    result = [
        {'poll_str_id': poll.poll_str_id, 'question': poll.question}
        for poll in active_polls
    ]
    return jsonify(result)


# Milestone 3: Close a Poll
@app.route('/polls/<poll_str_id>/status', methods=['PUT'])
def update_poll_status(poll_str_id):
    data = request.get_json()
    new_status = data.get('status')

    poll = Poll.query.filter_by(poll_str_id=poll_str_id).first()
    if not poll:
        return jsonify({'error': 'Poll not found'}), 404

    poll.status = new_status
    db.session.commit()
    return jsonify({'message': f"Poll '{poll_str_id}' status updated to '{new_status}'"})


# Database Setup (For Testing)
@app.before_first_request
def create_tables():
    db.create_all()

if __name__ == '__main__':
    app.run(debug=True)
